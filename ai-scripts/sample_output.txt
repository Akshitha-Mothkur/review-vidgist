 Hi everyone and welcome to my college and today session is going to be a complete guide to becoming a DevOps Engineer in 2025. In today's session we are going to cover the difference skills that we need to learn, the tools that we require and have also prepared a step-by-step documentation for all of us that can help us in our DevOps journey. Now before we start this session, there's a quick misconception that I want to clear out in the beginning which is that generally majority of the companies who have developed DevOps are not entry-level roles which have some pressure to complete their degree or some masterclass can take some bootcamp after some cohort. Majority companies prefer to hire an already experienced working professional for the role of a DevOps Engineer. So generally the DevOps engineers start their journey in the tech industry as a software engineer, as a software developer or maybe as a database administrator or with any other tech role and then after learning the required DevOps skills they make the switch from the current profile to the DevOps Engineer profile. So this is one thing that we need to be clear in our mind especially when we are looking at this session as a fresher. Now when we talk about the word DevOps it is a combination of two words, development and operations. Generally if someone has a company in their company then two departments are involved. First is the development department which builds the application, code, and then there's the operation department which is deployed or it maintains the future. Now generally DevOps Engineer's role is served as a link between these two departments. Generally DevOps Engineer is not concerned with how the application is developed but if the development has already been a prior experience then it helps us to develop our role. Generally majority of the companies who have developed DevOps Engineer's role are to ensure that once our application is successfully deployed then the new version of the new changes that are being made will be seamlessly deployed in a good way and we can maintain that application well. So this entire process is the responsibility of the DevOps Engineer and it has to ensure that the DevOps Engineer has to ensure that the entire process should work in a continuous manner. Because there are many different changes in which the applications are in different versions. So this entire process should be in a continuous manner and secondly the DevOps Engineer needs to ensure that this entire process happens in an automated way because in today's date the majority of our deployment pipeline is not manually worked and that is why in the role of DevOps there's a lot of automation which is involved. So this was an overview of a DevOps Engineer's exact organization. Today we are going to learn different steps to learn skills and technologies that we need to learn. First of all the things that we need to learn is the DevOps Engineer. Those are Linux fundamentals. Or if we are to generalize this, we will operate system fundamentals. Now why operating systems? Because generally whatever our application develops, it is on our virtual servers. And to set up our virtual servers we should have a good operating system. Generally majority of the servers in the industry are Linux based. Some servers are based on Windows but the majority we need to focus on Linux is on the fundamentals. So that's why we need to have a good knowledge and we should also be familiar with command line interface. Generally the common shell in the industry is CLI, that is called bash. So that's why we should learn about bash and the different commands that are associated with it. So we need to learn about OS processes and permissions, PSKIL, CH mode, what are the commands used. And what are the other different commands used in the bash cell. We need to learn about package management which is called apt NIA. And we should also be familiar with using text editors, especially from the CLI, which is one of the most popular options. So the Linux fundamentals are the knowledge of operating systems. We need to learn about bash and bash commands. And these are all the things that we need to cover. After that our step 2 comes which is to learn about networking and security concepts. Now when we talk about computer networking, it plays an integral role both in development and deployment. So its fundamental knowledge about how computers interact with each other. It is our strong one. In fact, as a DevOps engineer, it is also a strong one on one level. So the different things we need to learn, that includes the OSI, TCP, IP model, different protocols that exist, like HTTP, HTTPS, SSH, etc. Our IP addresses are all connected, all the data are connected. DNS domain names are serviced. Our different different network issues that exist, because when we are maintaining the time of deployment, then what are the different issues that can exist, networking issues that can exist. So that we can easily resolve their strong knowledge. This way we should also know how to configure firewalls and proxy servers. Now going forward, when we have covered all these topics, we will also be learning about load balancer and things like caching servers. Now we are learning concepts, there is one more tool that we can go and explore which is called Wireshark. Wireshark is essentially a network analyzer, which helps us to understand networking or DP. So we can also go and explore this. Next thing that we are going to learn is scripting or learning about a programming language. As we have discussed before, as a DevOps engineer, automation of tasks is really important. And to automate the task, we need to write scripts. Now we can do something about the task, it could be a cron job, it could be backup automation, it could be system monitoring analysis, it could be long analysis or anything else. Now generally, our scripting languages are, in which we have three most popular options, industry, Python, Ruby and GoLang. And in this way, the most popular option is Python, because it is really simple and easy to learn. And with it, Python is one of the most popular and widely used programming or scripting languages in the industry. Whenever we are going to learn Python, or scripting languages, we are going to learn. So we need to learn about the syntax and the fundamentals, we need to learn about the useful libraries which we use in automation. We need to learn about file handling and how to write automation scripts in the respective language. Now, in this case, we have also created a free 10 plus R's tutorial, complete tutorial of Python on this YouTube channel. If we want to learn Python, then we can learn from there, the link is available in the description box. Next thing we have to learn is version control. Now, as a developer, we have already used a version control system. Git is one of the most popular options in the industry. So, we need to get strong knowledge. Now, we need to know about the important Git commands, like init, clone, push, pull, merge, rebase. We should be aware about the concept of branching. We are emerging how we can get merge conflicts, in terms of how we resolve the conflicts. We should also know about them. Now, we have already got and got up quite completely to the tutorial YouTube. If you want to learn from there, you can also learn from there. The link is in the description box. Next, she is step 5 for us to learn about cloud. Basically, in today's date, as per the application, majority cases are deployed. They use some kind of a virtual infrastructure which is based upon the cloud. Now, whenever we talk about cloud, we are developing, we are deploying. Generally, we use cloud services. If we talk about cloud providers, there are three most popular options in the industry. Which is AWS by Amazon, Azure by Microsoft, and Google Cloud Platform. We can also learn from them, but in the industry, AWS is more popular as compared to GCP. And in the same way, the most popular option in today's date is Amazon Web Services. Now, we don't need to learn from them, we just need to learn one at a time. And we can take a strong command on it. If we want, we can also do a certification. As a working professional, we can invest some time to get an AWS or an Azure certification. Now, whenever we talk about Azure services, there are countless services out there. But we don't need to learn all of them. We need to learn that or that we are a specific project, which we are working on, or any organization, specific services that we are required to learn, or the most commonly used services are the ones we are going to learn. As we talk about AWS, we can learn to use services like EC2, S3, AWS, Lambda, RDS, OGO, Routh53, Cloud Watch, Cloud Front, so we can learn about all these different services. Whenever we pick a cloud provider, in the different services, we need basic knowledge to configure and manage service as well as data. In this, we need to know EC2, S3 and RDS to manage users, groups, and different different roles to cloud platforms. We need to set up and manage isolated networks like AWS Virtual Private Cloud. So this was step five. The next step, which is step six, is to learn about the concept of microservices and containerization. A container is a very popular in the industry nowadays. They basically solve a very classical problem in the tech industry, which is, Kate works on your machine, but it doesn't work on my machine. So, we have this concept of containers to solve this problem. Containers, we basically package the entire application and its dependencies into a single unit, which we call a container. Containers, generally, we use microservices architecture in a very large number of ways, which we use every single service independently, deploy as a container. I've made a detailed tutorial about what microservices architecture is. If you want, you can also watch that tutorial. Whenever we talk about containerization, Docker is one of the most popular tools, which is used in containerization. So, generally, in majority companies, where microservices architecture and containers are used, where it is a given Docker is being used. So, Docker will have to learn about the overview of what virtualization is, what containerization is. We need to learn about Docker images in which way we manage different containers. The basic Docker commands, like Run, PS, Build, how to write Docker files, how to use Docker Compose. Because this is important when we have multiple containers. Now, the next step in the entire process is to know how to set up a CI CD pipeline. Basically, CI CD stands for Continuous Integration Continuous Deployment. It is represented by an infinite loop because it is a continuous, never-ending process which runs through the entire software development life cycle. Now, let's suppose we have an application in our organization that we have developed. In this application, there will be a lot of changes, there will be a lot of upgradations. We can find a new version tomorrow. So, the changes that we have to the code will be we have to push all these changes on the server. And this entire task is done via a CI CD pipeline. Generally, CI CD pipeline works in four different stages. First, we source the code, that is, get the code, then we build the code, we build the application with the newer changes, then we test the application and after that, we deploy the application onto the server. And this entire process is called pipeline and this entire process is automated because it is a very time-taking process and if manually done, this is error prone. This is why this entire automation cycle is very important. And generally, every single of these companies has a set-up of their internal CI CD. Generally, when we talk about CI CD, there are multiple tools that can help us automate this entire process. In which we have Jenkins, we have get-hub-action CI CD, we have get-labs CI, we have circle CI, Travis CI. In this, one of the most popular options is Jenkins. So, we can only take two tools. Generally, almost similar entire process is used by everyone, but if we have a good understanding on one of the tools, we will have to switch to another tool. Then it will be comparatively easier for us. And generally, every organization is using a different tool for itself. So, we don't need to learn all together stick to one at a time. And that is also my vision behind this entire guide because if you notice, in every step, I have specifically a tool or a technology to learn because if we learn one thing at a time and complete different steps, so a overview of the DevOps is to learn how to better better with us. And then, if we go into one particular step, or in more detail, different tools are going to learn for doing the same work, then it will be very easy for us to do that. Now, the next step in the process is to learn about infrastructure as code tools. Now, whenever the organization has developed, generally, we develop our dev environment, then we take it to the test environment, then we take it to the staging environment and finally, we deploy it in our own environment. Now, all the environments are in it, create if we manually do it. So, there are the same problems that we have already discussed before, it is going to be a manual time taking process. And also, this entire process is very error-prone. So, that's why we have an automated way to do it. First of all, to set up our infrastructure, which is also called provisioning the infrastructure and a separate way to configure that same infrastructure to be able to deploy our applications. So, generally, here, we help to help infrastructure as code tools. In this, first of all, tools are used for provisioning. And the other tools are used to configure our infrastructure. In provisioning, we have one of the most popular tools that is Terraform, which is widely used in the industry. So, we should learn from this. Alternatives are also but still, I would suggest you to learn Terraform. Terraform is very effective because it uses a declarative approach. In this, we have declarative configuration files written which means that we have to tell us what should our infrastructure look like. In this way, we have to provision that infrastructure which is not used to be used. And that is why it makes the entire automation process very simple. And this is a declarative approach which is very simple for us. And if we already have infrastructure, then we have to change it in the future. If we want to add two new services, or if we want to update the version of something, then it is easier for us to do that. Or if we want to replicate the entire dev environment into our product environment, then that process is very simple. In this, we have IEC tools for configuring our infrastructure. For example, our existing architecture is three different servers. Now in servers, if we want to install one of the tools, then we will use something like Ansible. Ansible is one of the most popular tool for configuring infrastructure. And we need to learn this. It has also been built. But if we use a combination of terraform and Ansible, then this is one of the most popular tools for configuring our infrastructure. And we need to learn this. If we want to explore IEC tools, then we need to explore IEC tools. Next step in the process for us is to learn about orchestration and management. Orchestration, generally, means that tools are using what we are using. We are using our automation. This individual setup, now we are going to bind it together into a single unit into a single, automated unit that flows together. Let's take an example of an application just that we are using containers. If we are building our service as containers. So, generally, we have multiple containers that we have to manage. Now, if we are building a small scale application, then we can use a Docker Compose. But as soon as we start talking about complex application, Jullar, scale, per developer. So, there we need some kind of an orchestration tool. So, orchestration tools in terms of the Kubernetes is one of the most popular options out there that we should learn about. Now, let's talk about how to create and manage Kubernetes clusters. In a way, we can deploy our applications on Kubernetes. We should learn about the different commands, like apply, build, delete, so, all these things we will learn. Now, comes the final step in the entire process, which is to learn about monitoring and logging. Generally, if we have an application that already deployed. So, we need to continuously monitor the health of the application. We need to continuously track the performance of the application as well as the infrastructure. And we continuously attain far from the bottom of the built-in as well. That is exactly what we want to do. As I said earlier, there is a launch right on. Where i can繁l场 medium to signaturely import to the reached perspective instead of extremely AND nationwide.ос High- Ohhh. Now, let's start. individuals are focused on corners in a way. And each development closely does contribute through a كلniejsity process is vizulys, karnikali, vye hav tools like graphana, jo hame apne data ki better understanding de reo te. Abhiske alawa vye hav aadher tools in the industry, jsa aaws cloud watch oge aya elk hogea, but these are the most popular options aur hame sipsi palea jakar ini ko seapknaaam. So, this was a step by step guide of the entire DevOps process, jaske an dar hame ne baat ki ki kye aakya steps hame, we talked about the tools that we need to learn and uske saat hame ae vye sikha ki un tools ko hame kis process me aur kyo u use karni ki saat hame, we need to learn these tools jaanke upaara primary focus rea aa for our entire DevOps journey. Par agar aa in saare tools ko ek baram seek le te hame as a DevOps engineer jakar ko kuchho aur additional technologies hai tools hame, janko explore karsak te. Inke an dar hame doh chisoon ko additionally aage future me in saare chisoon ko seekne ke baat jane explore karni ae hame sipsi palea hame rea pas ek service mesh aa jati ae. Generally when ever we are using a microservices architecture, to usme advanced traffic management ke le ae and for smooth communication of different services with each other, hame ek service mesh ko use karsak te. Istio is one of the most popular service mesh in the industry and it is widely used. To ushe hame jakar sik sakte hame, second chees jo sam sik sakte hame in the latest stages of our journey is something called getops. Getops vye se is generally not very widely used in the industry and it is a very recent concept par fir bi jakar is hame explore karsak te. Getops ke an dar basically hame ari jo git repository hai. We treat it as the single source of truth for managing as well as automating our different operations. To getops ke an dar bi there are multiple tools that we have, Argo, SkiD and flux are the two most popular tools june am jakar explore karsak te. So this was our entire DevOps road map jesse am follow karsak te to become a DevOps engineer in 2025. And I hope that today's session is contributed positively in your entire learning journey and you've learned something new from today's session about being a DevOps engineer. Aaj ghe leit nai, Will the next session can the till then keep learning and keep exploring.